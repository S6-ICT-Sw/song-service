name: Song service

on:
  push:
    branches:
      - development
  pull_request:
    branches:
    - development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # Check out the code
    - name: Check out the code
      uses: actions/checkout@v4

    # Setup Go
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1' # Specify your Go version

    # Cache Go modules
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
              ~/.cache/go-build
              ${{ runner.tool_cache }}/go
        key: go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # Install dependencies
    - name: Install dependencies
      run: go mod download

    - name: Build the application
      run: go build -v ./cmd/song-service/
      
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Run Unit Tests
      run: go test -v ./... -cover

  integration-test:
    runs-on: ubuntu-latest
    
    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1'

    - name: Install dependencies
      run: go mod download

    - name: Run application
      env:
        RABBITMQ_URI: amqp://guest:guest@localhost:5672/
        MONGO_URI: mongodb+srv://song-snippets-admin:DQv4P9LXNBQ2xsdb@songsnippets.ci2mt.mongodb.net/?retryWrites=true&w=majority&appName=SongSnippets
      run: go run ./cmd/song-service

    - name: Run integration tests
      env:
        RABBITMQ_URI: amqp://guest:guest@localhost:5672/
        MONGO_URI: mongodb://localhost:27017/testDB
      run: go test -timeout 300s -run ^TestCreateSongPublishIntegration$ github.com/TonyJ3/song-service/integration_test

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1'

    - name: Run GolangCI-Lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0
        golangci-lint run ./...

  snyk:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
              ~/.cache/go-build
              ${{ runner.tool_cache }}/go
        key: go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    # Install dependencies
    - name: Install dependencies
      run: go mod download

    - name: Install Snyk
      run: npm install -g snyk

    # Run Snyk test with severity threshold
    - name: Run Snyk test
      run: snyk test --severity-threshold=medium --json
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Monitor the project with Snyk
      run: snyk monitor
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: [build, test, integration-test, lint, snyk]
    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t tonyj3/song-snippets-song-service:latest .
        docker push tonyj3/song-snippets-song-service:latest
      
